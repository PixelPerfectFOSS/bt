const fs = require("fs-extra");  
const path = require("path");
//const childProcess = require("child_process");
const unixify = require("unixify");
const glob = require("glob-promise");
const Font = require("fonteditor-core").Font;
const glyphhanger = require("./glyphhanger");

function requireUncached(module) {
    delete require.cache[require.resolve(module)];
    return require(module);
}

const fontsPath = path.resolve("./Fonts");
const fontsListPath = path.resolve("./.data/fonts.json");
const fontsConfigPath = path.resolve("./.data/fonts.config.json");
const fontsOutputPath = path.resolve("./HTML/fonts.css");

const comment = "/* Generated by BT Font Generator */\n";

async function fontParams(fontPath) {
    function processName(str){
        return str.replace(/[ \`\'\"]+/g, "_");
    }

	const buffer = await fs.readFile(fontPath);
	const format = path.extname(fontPath).substring(1);
	const font = Font.create(buffer, { type: format });
	const fontObject = font.get();
	const fontNameParams = fontObject["name"];
	const family = processName(fontNameParams.preferredFamily || fontNameParams.fontFamily || "Unnamed");
	const subFamily = processName(fontNameParams.preferredSubFamily || fontNameParams.fontSubFamily || "Regular");
	const name = `${family}_${subFamily}`;

	return { name, family, subFamily };
}

async function init() {
    console.log("Font Generator init");

	if (!(await fs.pathExists(fontsConfigPath))){
		await fs.writeJSON(fontsConfigPath, {});
	}

    const pattern = `${unixify(fontsPath)}/**/*.{ttf,otf}`;
    const files = await glob.promise(pattern);
    const fonts = {};
    for (const fontPath of files) {
        const fontName = path.basename(fontPath);
        const params = await fontParams(fontPath);
        fonts[fontName] = params;
    }
    await fs.writeJSON(fontsListPath, fonts);
}

async function fontsList(req = {}) {
    if (await fs.pathExists(fontsListPath)) {
        const fonts = requireUncached(fontsListPath);
        return {
            ok: true,
            message: "",
            data: { fonts: fonts }
        };
    }
    else {
        return {
            ok: false,
            message: `${fontsListPath} not found`
        };
    }
}

async function fontsConfig(req = {}) {
    if (await fs.pathExists(fontsConfigPath)) {
        const config = requireUncached(fontsConfigPath);
        return {
            ok: true,
            message: "",
            data: {
                config: config
            }
        };
    }
    else {
        return {
            ok: false,
            message: `${fontsConfigPath} not found`
        };
    }
}

async function generateFonts(req) {
    console.log("Font generator is running...");
    const config = req.config;

    let css = comment;
    Object.keys(config).forEach(function(key) {
        const fontFile = key;
        const fontOptions = config[key];
        if (fontOptions.engine === "fec") {
            // TODO: fonteditor-core support
            console.log("Warning: fonteditor-core is not supported yet, using default engine (glyphhanger)");
        }
        css += glyphhanger.generate(fontsPath, fontFile, fontOptions);
    });

    await fs.writeFile(fontsOutputPath, css);
    await fs.writeJSON(fontsConfigPath, config);
    return {};
}

module.exports = {
    init,
    fontsList,
    fontsConfig,
    generateFonts
};
